@{
    ViewData["Title"] = "Home Page";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>

    <div>
        <div class="card shadow">
            <h1>Attendance</h1>
			<h5>Date: <span id="currentDate"></span></h5>
            <div>
                Present Staff: @ViewBag.attendanceCount
                Absent Staff: @ViewBag.absent
            </div>
		</div>
        <div class="card shadow">
            <h1>Tasks Severity Count</h1>
            <canvas id="TaskSeverity"></canvas>
        </div>
        <div class="card shadow">
            <h1>Tasks Progress</h1>
            <canvas id="TaskProgress"></canvas>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var today = new Date();
        var formattedDate = today.toISOString().split('T')[0];
        document.getElementById('currentDate').textContent = formattedDate;
    });
</script>

<!--Script for Tasks-->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Display current date
        var today = new Date();
        var formattedDate = today.toISOString().split('T')[0];
        document.getElementById('currentDate').textContent = formattedDate;

        // Task Severity Chart
        const ctxSeverity = document.getElementById('TaskSeverity');
        const taskSeverityCounts = @Html.Raw(Json.Serialize(@ViewBag.taskSeverityCounts));
        const severities = ['Normal', 'LOW', 'MEDIUM', 'High', 'CRITICAL'];
        const taskDataSeverity = severities.map(severity => taskSeverityCounts[severity] || 0);

        new Chart(ctxSeverity, {
            type: 'bar',
            data: {
                labels: severities,
                datasets: [{
                    label: '# of Tasks',
                    data: taskDataSeverity,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Task Progress Chart
        const ctxProgress = document.getElementById('TaskProgress');
        const taskProgressCounts = @Html.Raw(Json.Serialize(@ViewBag.taskProcessCounts));
        const Progress = ['Pending', 'InProgress', 'Completed', 'On Hold'];
        const taskDataProgress = Progress.map(status => taskProgressCounts[status] || 0);

        new Chart(ctxProgress, {
            type: 'bar',
            data: {
                labels: Progress,
                datasets: [{
                    label: '# of Tasks',
                    data: taskDataProgress,
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });
</script>
